
qunit 文档

1.增加一个测试用例
test( name, expected, test )	
Add a test to run.

2.增加一个异步测试用例，这个用例中必须包含start()
asyncTest( name, expected, test )	
Add an asynchronous test to run. The test must include a call to start().

3.在测试中预计有多少断言运行
expect( amount /*数目*/ )	
Specify how many assertions are expected to run within a test.

4.在模块中分开测试
module( name, lifecycle )	
Separate tests into modules.

5.初始化测试运行（如果已经运行了，它会被重新初始化，从而有效地将其重置）。这种方法并不需要所谓在正常使用的QUnit。
QUnit.init( )	
Initialize the test runner (if the runner has already run it’ll be re-initialized, effectively resetting it). 
This method does not need to be called in the normal use of QUnit.

6.自动调用每个测试后QUnit。可以调用测试代码，虽然通常其更好地 与多个调用 分开测试代码测试。
QUnit.reset( )	
Automatically called by QUnit after each test. Can be called by test code, 
though usually its better to seperate test code with multiple calls to test().



Assertions:断言
1.一个布尔断言，相当于JUnit的assertTrue。通过，如果第一个参数是真。
ok( state, message )	
A boolean assertion, equivalent to JUnit’s assertTrue. Passes if the first argument is truthy.

2.一个比较断言，相当于为JUnit的assertEquals。
equal( actual, expected, message )	
A comparison assertion, equivalent to JUnit’s assertEquals.

3.一个比较断言，相当于为JUnit的assertNotEquals。
notEqual( actual, expected, message )	
A comparison assertion, equivalent to JUnit’s assertNotEquals.

4.一个深的递归比较断言，基本数据类型，数组和对象。
deepEqual( actual, expected, message )	
A deep recursive comparison assertion, working on primitive types, arrays and objects.

5.一个深的递归比较断言，基本数据类型，数组和对象，结果反转，通过一些属性时，不等于。
notDeepEqual( actual, expected, message )	
A deep recursive comparison assertion, working on primitive types, arrays and objects, with the result inverted, 
passing when some property isn’t equal.

6.一个严格比较断言当相等时
strictEqual( actual, expected, message )	
A stricter comparison assertion then equal.

7.一个严格比较断言当不相等时
notStrictEqual( actual, expected, message )	
A stricter comparison assertion then notEqual.

8.测试一个断言如果回调抛出异常
raises( block, expected, message )	
Assertion to test if a callback throws an exception when run.

异步测试
Asynchronous Testing:

1.开始的TestRunner被停止后，再次运行测试。
start( decrement /*递减*/ )	
Start running tests again after the testrunner was stopped. See stop().

2.停止的TestRunner等待异步运行测试。调用start()继续。
stop( increment/*递增*/ )
Stop the testrunner to wait for async tests to run. Call start() to continue.


URL Parameters URL参数

您可以通过URL的参数定制个人??testruns。
要启动，单击“重新运行链接任何测试结果旁边有QUnit只运行单一测试。
这增加了过滤器=[名称的测试]的URL。
You can customize individual testruns via URL paramters. 
To start, click the Rerun-link next to any test result to have QUnit only run that single test. 
This adds ?filter=[name-of-test] to the URL.

You can also add “?filter=[module]” URL to run only tests within that module, 
e.g. http://swarm.jquery.org/git/jquery/test/?filter=effects runs only tests for effects.
简单的说就是可以通过url加参数运行指定的模块，要是模块名字里包含空格，貌似会比较麻烦

两个更多的过滤器可以激活手动编辑的网址，或通过点击标题中的复选框：
Two more filters can be activated manually by editing the URL, or by clicking the checkboxes in the header:

?noglobals: 
QUnit will detect if a test introduced a new global variable (aka new properties on the window object), 
making that test fail. This helps finding accidental global variables, e.g. introduced by forgetting a var-keyword at the right place.
QUnit将检测如果测试引入了一个新的全局变量（又名新的属性窗口对象），
该测试失败。这有助于发现意外的全局变量，如介绍了一个var关键字忘记在正确的地方。

?notrycatch: 
This tells QUnit to runs tests without a surrounding try-catch block. If an exception is thrown, 
it will break the testrunner (it won’t continue running any tests), 
but the original exception is very likely to contain much more useful information, 
like a stacktrace. All JavaScript implementations handle rethrowing exceptions very badly, so this can help debugging a particular problem.
这告诉QUnit运行测试，没有周围的try - catch块。如果抛出一个异常，
它将打破的TestRunner（不会继续运行任何测试），
但原始的异常很可能包含更多有用的信息，
像一个堆栈跟踪。所有的JavaScript实现处理重新抛出异常非常糟糕，所以这可以帮助调试一个特别的问题。



集成到浏览器自动化工具
Integration into Browser Automation Tools

融入QUnit浏览器的自动化工具，那些做的推出各种不同的浏览器和收集的结果的工作，
QUnit提供了一个简单的微格式，其测试结果。
To integrate QUnit into browser automation tools, those doing the work of launching various browsers and gathering the results, 
QUnit provides a simple microformat for its test result.

此外，QUnit还提供了一系列的回调，可以覆盖各种动作发生时提供更新。
所有这些（除了开始），这里列出的属性接收一个单一的参数：
Additionally, QUnit provides a series of callbacks that can be overwritten to provide updates when various actions occur. 
All of them (except begin) receive a single argument with the properties listed here:

1.被调用断言完成时。结果是一个布尔（true为通过，false未失败）和消息的说法提供了一个字符串描述。
QUnit.log({ result, actual, expected, message }) 
is called whenever an assertion is completed. 
result is a boolean (true for passing, false for failing) and message is a string description provided by the assertion.

2.被调用新一批测试的断言时开始运行。名称是检验批次的字符串名称。
QUnit.testStart({ name }) 
is called whenever a new test batch of assertions starts running. name is the string name of the test batch.

3.一批断言完成运行时调用。名称是检验批次的字符串名称。失败是测试发生故障的数量。总测试断言发生的总数。通过的是通过测试断言。
QUnit.testDone({ name, failed, passed, total }) 
is called whenever a batch of assertions finishes running. 
name is the string name of the test batch. failed is the number of test failures that occurred. 
total is the total number of test assertions that occurred. Passed is the number of test assertions that passed.

4.被调用每当一个新的测试模块开始运行。名称是模块的字符串名称。
QUnit.moduleStart({ name }) 
is called whenever a new module of tests starts running. name is the string name of the module.

5.被调用一个模块完成运行时。名称是模块的字符串名称。失败是模块故障发生。总模块断言发生的总数。通过的是模块断言通过。
QUnit.moduleDone({ name, failed, passed, total }) 
is called whenever a module finishes running. 
name is the string name of the module. failed is the number of module failures that occurred. 
total is the total number of module assertions that occurred. Passed is the number of module assertions that passed.

6.运行任何测试之前被调用一次。（更好的将已经QUnit.start，但是那已经在使用中别处无法改变的。）
QUnit.begin() 
is called once before running any tests. 
(a better would’ve been QUnit.start, but thats already in use elsewhere and can’t be changed.)

7.被调用时，所有的测试运行完。失败发生的故障数。总总数的断言发生后，通过传递断言。运行时以毫秒为单位的时间，从开始到结束运行的测试。
QUnit.done({ failed, passed, total, runtime }) 
is called whenever all the tests have finished running. failed is the number of failures that occurred. 
total is the total number of assertions that occurred, passed the passing assertions. 
runtime is the time in milliseconds to run the tests from start to finish.

此外，QUnit.reset被调用后每个测试组。如果默认情况下，复位＃qunit装备元素，是不够的，您可以重写或代理它添加额外的重置。
Additionally QUnit.reset is called after every test group. If the default, resetting the #qunit-fixture element, 
isn’t enough, you can override or proxy it to add additional resets.













